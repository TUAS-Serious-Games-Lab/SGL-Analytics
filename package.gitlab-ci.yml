.package-client-lib:
  stage: package
  needs:
  - job: build-debug
    artifacts: false
  - job: build-release
    artifacts: false
  - job: test
    artifacts: false
  script:
    - 'cd SGL.Analytics.Client'
    - 'dotnet pack -c Release -p:Version="$(git describe --tags --abbrev=0)${VERSION_SUFFIX}"'
    - 'dotnet nuget add source "${CI_API_V4_URL}/projects/${PACKAGE_REPO_PROJECT_ID}/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text'
    - 'dotnet nuget push "bin/Release/*.nupkg" --source gitlab --symbol-source gitlab'

package-client-lib-main:
  extends: .package-client-lib
  variables:
    GIT_DEPTH: 0
    VERSION_SUFFIX: "-dev"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

package-client-lib-tags:
  extends: .package-client-lib
  variables:
    GIT_DEPTH: 0
    VERSION_SUFFIX: ""
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+(\.\d+)*$/'

.package-backend-docker-images:
  stage: package
  needs:
  - job: build-debug
    artifacts: false
  - job: build-release
    artifacts: false
  - job: test
    artifacts: false
  variables:
    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: ${CI_PROJECT_DIR}/docker_ci_cache
  services:
  - registry:2
  before_script:
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  cache:
    paths:
    - 'docker_ci_cache'
  script:
  - echo IMAGE_CONTEXT='$'${IMAGE_NAME}_PACKAGE_IMAGE_CONTEXT
  - echo IMAGE_DIR='$'${IMAGE_NAME}_PACKAGE_IMAGE_DIR
  - echo IMAGE_URL='$'${IMAGE_NAME}_PACKAGE_IMAGE
  - eval IMAGE_CONTEXT='$'${IMAGE_NAME}_PACKAGE_IMAGE_CONTEXT
  - IMAGE_CONTEXT=${IMAGE_CONTEXT:-${CI_PROJECT_DIR}}
  - eval IMAGE_DIR='$'${IMAGE_NAME}_PACKAGE_IMAGE_DIR
  - eval IMAGE_URL='$'${IMAGE_NAME}_PACKAGE_IMAGE
  - echo IMAGE_CONTEXT=${IMAGE_CONTEXT}
  - echo IMAGE_DIR=${IMAGE_DIR}
  - echo IMAGE_URL=${IMAGE_URL}
  - BUILD_OPTS="--cleanup --cache=true --insecure-registry=registry:5000 --cache-repo=registry:5000/cache --context ${IMAGE_CONTEXT} --dockerfile ${IMAGE_DIR}/Dockerfile --target final --build-arg SERVICE_BASE_IMAGE_OVERRIDE=${SERVICE_BASE_IMAGE_OVERRIDE} --ignore-path docker_ci_cache"
  - /kaniko/executor $BUILD_OPTS --destination "${IMAGE_URL}:${PACKAGE_IMAGE_TAG_1}" --destination "${IMAGE_URL}:${PACKAGE_IMAGE_TAG_2}" --destination "${IMAGE_URL}:${CI_COMMIT_SHORT_SHA}"

.docker_images_mapping:
  variables:
    Base_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.ServiceBaseImage"
    Base_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/base"
    LogsCollector_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.Logs.Collector"
    LogsCollector_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/logs-collector"
    UsersRegistration_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.Users.Registration"
    UsersRegistration_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/users-registration"
    AppRegistrationTool_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.AppRegistrationTool"
    AppRegistrationTool_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/app-registration"
    DB_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.DB"
    DB_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/db"
    DB_PACKAGE_IMAGE_CONTEXT: "${CI_PROJECT_DIR}/SGL.Analytics.Backend.DB"
    APIGW_PACKAGE_IMAGE_DIR: "SGL.Analytics.Backend.APIGW"
    APIGW_PACKAGE_IMAGE: "${CI_REGISTRY_IMAGE}/api-gateway"
    APIGW_PACKAGE_IMAGE_CONTEXT: "${CI_PROJECT_DIR}/SGL.Analytics.Backend.APIGW"

.pkg-docker:
  extends: .package-backend-docker-images
  parallel:
    matrix:
    - IMAGE_NAME: LogsCollector
    - IMAGE_NAME: UsersRegistration
    - IMAGE_NAME: AppRegistrationTool
    - IMAGE_NAME: DB
    - IMAGE_NAME: APIGW

build-service-base-image-main:
  extends:
  - .package-backend-docker-images
  - .docker_images_mapping
  variables:
    PACKAGE_IMAGE_TAG_1: ${CI_COMMIT_REF_SLUG}
    PACKAGE_IMAGE_TAG_2: latest
    IMAGE_NAME: Base
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

pkg-docker-main:
  extends:
  - .pkg-docker
  - .docker_images_mapping
  needs:
  - build-service-base-image-main
  variables:
    SERVICE_BASE_IMAGE_OVERRIDE: "${CI_REGISTRY_IMAGE}/base:${CI_COMMIT_SHORT_SHA}"
    PACKAGE_IMAGE_TAG_1: ${CI_COMMIT_REF_SLUG}
    PACKAGE_IMAGE_TAG_2: latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

build-service-base-image-tags:
  extends:
  - .package-backend-docker-images
  - .docker_images_mapping
  variables:
    PACKAGE_IMAGE_TAG_1: ${CI_COMMIT_TAG}
    PACKAGE_IMAGE_TAG_2: prod
    IMAGE_NAME: Base
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+(\.\d+)*$/'

pkg-docker-tags:
  extends: .pkg-docker
  needs:
  - build-service-base-image-tags
  variables:
    SERVICE_BASE_IMAGE_OVERRIDE: "${CI_REGISTRY_IMAGE}/base:${CI_COMMIT_TAG}"
    PACKAGE_IMAGE_TAG_1: ${CI_COMMIT_TAG}
    PACKAGE_IMAGE_TAG_2: prod
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+(\.\d+)*$/'

deployment-package:
  stage: package
  needs:
  - job: build-debug
    artifacts: false
  - job: build-release
    artifacts: false
  - job: test
    artifacts: false
  script:
  - mkdir -p sgl-analytics
  - cp -f docker-compose.yml sgl-analytics/docker-compose.yml
  - if [[ $CI_COMMIT_BRANCH = "main" ]]; then cp -f docker-compose.staging.yml sgl-analytics/docker-compose.staging.yml; fi
  - if [[ -n "$CI_COMMIT_TAG" ]]; then cp -f docker-compose.production.yml sgl-analytics/docker-compose.production.yml; fi
  artifacts:
    paths:
    - sgl-analytics/docker-compose.yml
    - sgl-analytics/docker-compose.*.yml
    - SGL.Analytics.Backend.APIGW/etc/api_conf.d
    - SGL.Analytics.Backend.APIGW/etc/backend_conf.d
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG =~ /^\d+(\.\d+)*$/'
