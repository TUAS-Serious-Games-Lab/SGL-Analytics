version: '3.4'

networks:
  frontend:
  proxy:
    internal: true
  backend:
    internal: true

volumes:
  db-data:
  game-logs:
  log-collector-log-files:
  user-registration-log-files:
  jwt-key-config:

services:
  db:
    image: ${DOCKER_REGISTRY-}sglanalytics/db
    build:
      context: SGL.Analytics.Backend.DB
      dockerfile: Dockerfile
    environment:
      USERREG_PW:
      LOGS_PW:
      POSTGRES_PASSWORD:
    networks:
    - backend
    volumes:
    - "db-data:/var/lib/postgresql/data"

  jwt-secret-key-gen:
    image: debian:stable
    command: >
        bash -c "cd /etc/SGL.Analytics/JWT-Key/
        && if [ -f 'Jwt__SymmetricKey' ]; then echo 'Using existing JWT key.'; exit 0; fi
        && (dd if=/dev/random bs=512 count=1 | base64 -w 0 > ignore.NewKey)
        && chmod 600 ignore.NewKey && mv ignore.NewKey Jwt__SymmetricKey"
    volumes:
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"

  logs-collector-migrations:
    image: ${DOCKER_REGISTRY-}sglanalytics/logs-collector
    build:
      context: .
      dockerfile: SGL.Analytics.Backend.Logs.Collector/Dockerfile
    entrypoint: ["wait-for-it", "-s", "-t", "120", "db:5432", "--", "psql", "-h", "db", "-U", "sgla_logs", "-f", "DbMigrations.sql"]
    environment:
      PGPASSWORD: $LOGS_PW
    depends_on:
    - db
    networks:
    - backend

  users-registration-migrations:
    image: ${DOCKER_REGISTRY-}sglanalytics/users-registration
    build:
      context: .
      dockerfile: SGL.Analytics.Backend.Users.Registration/Dockerfile
    entrypoint: ["wait-for-it", "-s", "-t", "120", "db:5432", "--", "psql", "-h", "db", "-U", "sgla_users", "-f", "DbMigrations.sql"]
    environment:
      PGPASSWORD: $USERREG_PW
    depends_on:
    - db
    networks:
    - backend

  app-registrations:
    image: ${DOCKER_REGISTRY-}sglanalytics/app-registration
    build:
      context: .
      dockerfile: SGL.Analytics.Backend.AppRegistrationTool/Dockerfile
    environment:
      ConnectionStrings__LogsContext:
      ConnectionStrings__UsersContext:
    depends_on:
    - db
    - users-registration-migrations
    - logs-collector-migrations
    networks:
    - backend
  
  logs-collector-app:
    image: ${DOCKER_REGISTRY-}sglanalytics/logs-collector
    build:
      context: .
      dockerfile: SGL.Analytics.Backend.Logs.Collector/Dockerfile
    environment:
      ConnectionStrings__LogsContext:
    depends_on:
    - db
    - logs-collector-migrations
    networks:
    - proxy
    - backend
    volumes:
    - "game-logs:/var/game-logs"
    - "log-collector-log-files:/var/log/SGL.Analytics.LogCollector"
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"

  users-registration-app:
    image: ${DOCKER_REGISTRY-}sglanalytics/users-registration
    build:
      context: .
      dockerfile: SGL.Analytics.Backend.Users.Registration/Dockerfile
    environment:
      ConnectionStrings__UsersContext:
    depends_on:
    - db
    - users-registration-migrations
    networks:
    - proxy
    - backend
    volumes:
    - "user-registration-log-files:/var/log/SGL.Analytics.UserRegistration"
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"

  api-gateway:
    image: ${DOCKER_REGISTRY-}sglanalytics/api-gateway
    build:
      context: SGL.Analytics.Backend.APIGW
      dockerfile: Dockerfile
    depends_on:
    - logs-collector-app
    - users-registration-app
    restart: "on-failure"
    ports:
      - "80:80"
      - "443:443"
    networks:
    - proxy
    - frontend
