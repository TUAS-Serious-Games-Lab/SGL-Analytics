version: '3.4'

networks:
  frontend:
  proxy:
    internal: true
  backend:
    internal: true

volumes:
  db-data:
  game-logs:
  log-collector-log-files:
  user-registration-log-files:
  jwt-key-config:
    driver_opts:
      type: tmpfs
      device: tmpfs
  log-collector-conf:
  user-registration-conf:

services:
  db:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/db:${DOCKER_TAG-latest}
    environment:
      USERREG_PW:
      LOGS_PW:
      POSTGRES_PASSWORD:
    networks:
    - backend
    volumes:
    - "db-data:/var/lib/postgresql/data"

  jwt-secret-key-gen:
    image: alpine
    command: >
        sh -c "(cd /etc/SGL.Analytics/JWT-Key/
        && if [ -f 'Jwt__SymmetricKey' ]; then echo 'Using existing JWT key.'; exit 0; fi
        && (head -c 512 /dev/urandom | base64 -w 0 > ignore.NewKey)
        && chmod 600 ignore.NewKey && mv ignore.NewKey Jwt__SymmetricKey)
        && tail -f /dev/null"
        # The tail at the end keeps container alive to prevent restart loops when restart policy is set for staging and production environment.
    healthcheck:
      test: test -f /etc/SGL.Analytics/JWT-Key/Jwt__SymmetricKey
      start_period: 10s
    volumes:
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"

  logs-collector-migrations:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/logs-collector:${DOCKER_TAG-latest}
    entrypoint: ["wait-for", "-t", "120", "db:5432", "--", "psql", "-h", "db", "-U", "sgla_logs", "-f", "/DbMigrations.sql"]
    healthcheck:
      disable: true
    environment:
      PGPASSWORD: $LOGS_PW
    depends_on:
    - db
    networks:
    - backend

  users-registration-migrations:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/users-registration:${DOCKER_TAG-latest}
    entrypoint: ["wait-for", "-t", "120", "db:5432", "--", "psql", "-h", "db", "-U", "sgla_users", "-f", "/DbMigrations.sql"]
    healthcheck:
      disable: true
    environment:
      PGPASSWORD: $USERREG_PW
    depends_on:
    - db
    networks:
    - backend

  app-registrations:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/app-registration:${DOCKER_TAG-latest}
    depends_on:
    - db
    - users-registration-migrations
    - logs-collector-migrations
    networks:
    - backend
    volumes:
    - "log-collector-conf:/etc/SGL.Analytics/LogCollector/"
    - "user-registration-conf:/etc/SGL.Analytics/UserRegistration/"

  logs-collector-app:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/logs-collector:${DOCKER_TAG-latest}
    depends_on:
    - db
    - logs-collector-migrations
    networks:
    - proxy
    - backend
    volumes:
    - "game-logs:/var/game-logs"
    - "log-collector-log-files:/var/log/SGL.Analytics.LogCollector"
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"
    - "log-collector-conf:/etc/SGL.Analytics/LogCollector/"
    environment:
    - ASPNETCORE_URLS=http://+:80;http://localhost:8080

  users-registration-app:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/users-registration:${DOCKER_TAG-latest}
    depends_on:
    - db
    - users-registration-migrations
    networks:
    - proxy
    - backend
    volumes:
    - "user-registration-log-files:/var/log/SGL.Analytics.UserRegistration"
    - "jwt-key-config:/etc/SGL.Analytics/JWT-Key"
    - "user-registration-conf:/etc/SGL.Analytics/UserRegistration/"
    environment:
    - ASPNETCORE_URLS=http://+:80;http://localhost:8080

  api-gateway:
    image: ${DOCKER_REGISTRY_IMAGE_BASE-localhost:5000/sgl-analytics}/api-gateway:${DOCKER_TAG-latest}
    depends_on:
    - logs-collector-app
    - users-registration-app
    restart: "on-failure"
    ports:
      - "80:80"
      - "443:443"
    networks:
    - proxy
    - frontend
